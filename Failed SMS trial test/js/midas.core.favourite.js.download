var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Midas;
(function (Midas) {
    var Core;
    (function (Core) {
        var Favourite = (function (_super) {
            __extends(Favourite, _super);
            function Favourite(element) {
                _super.call(this, element, Core.ControlType.Favourite, { filledCssClasses: 'filled' });
            }
            Favourite.prototype.initialise = function () {
                this.initialiseElement();
                this.toggleFavourite(this.settings.isFavourite, false);
            };
            Object.defineProperty(Favourite.prototype, "icon", {
                get: function () {
                    return this.element.find('.favouriteicon');
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Favourite.prototype, "resultForm", {
                get: function () {
                    return $(this.settings.resultFormSelector);
                },
                enumerable: true,
                configurable: true
            });
            Favourite.prototype.initialiseElement = function () {
                this.element.attr('role', 'checkbox');
                this.element.attr('aria-checked', this.settings.isFavourite);
                this.element.attr('tabindex', 0);
                this.element.unbind('keydown');
                this.element.keydown(function (e) {
                    if (e.which === 32) {
                        // Prevent browser from moving to the bottom of the page when pressing spacebar
                        e.preventDefault();
                    }
                });
            };
            Favourite.prototype.createFavourite = function () {
                var _this = this;
                $.post(this.settings.createFavouriteOperation.url, this.settings.createFavouriteParameters, function (response, status) {
                    var form = _this.element.closest('form');
                    if (status === "success") {
                        if (response.indexOf != null && response.indexOf("Error") >= 0) {
                            Midas.Core.currentPage.showErrorModal(response, false);
                            return;
                        }
                        else if (response.Status != null && _this.resultForm.length && !Core.AjaxValidation.processAjaxResult(response, _this.resultForm[0])) {
                            return;
                        }
                        _this.toggleFavourite(true, true);
                    }
                    else {
                        Midas.Core.currentPage.showGenericErrorModal();
                    }
                }, "json");
            };
            Favourite.prototype.deleteFavourite = function () {
                var _this = this;
                $.post(this.settings.deleteFavouriteOperation.url, this.settings.deleteFavouriteParameters, function (response, status) {
                    var form = _this.element.closest('form');
                    if (status === "success") {
                        if (response.Status != null && !Core.AjaxValidation.processAjaxResult(response, form[0])) {
                            return;
                        }
                        _this.toggleFavourite(false, true);
                    }
                    else {
                        Midas.Core.currentPage.showGenericErrorModal();
                    }
                }, "json");
            };
            Favourite.prototype.toggleFavourite = function (isFavourite, triggerEvents) {
                var _this = this;
                this.icon.toggleClass(this.settings.filledCssClasses, isFavourite);
                this.element.unbind('click');
                this.element.unbind('keyup');
                if (isFavourite) {
                    this.element.click(function () {
                        _this.deleteFavourite();
                        return false;
                    });
                    this.element.keyup(function (e) {
                        if (e.which === 32) {
                            e.preventDefault();
                            _this.deleteFavourite();
                            return false;
                        }
                        return true;
                    });
                }
                else {
                    this.element.click(function () {
                        _this.createFavourite();
                        return false;
                    });
                    this.element.keyup(function (e) {
                        if (e.which === 32) {
                            e.preventDefault();
                            _this.createFavourite();
                            return false;
                        }
                        return true;
                    });
                }
                var title = this.element.attr('title');
                var itemDesciption = this.element.attr('data-item-description');
                if (title != null && title !== "") {
                    if (isFavourite) {
                        if (itemDesciption === 'template') {
                            this.element.attr('title', this.element.attr('title').replace("Save", "Remove"));
                            this.element.attr('title', this.element.attr('title').replace("as a template", "template"));
                        }
                        else {
                            this.element.attr('title', this.element.attr('title').replace("Add", "Remove"));
                        }
                    }
                    else {
                        if (itemDesciption === 'template') {
                            this.element.attr('title', this.element.attr('title').replace("Remove", "Save"));
                            if (!~this.element.attr('title').indexOf(" as a template"))
                                this.element.attr('title', this.element.attr('title').replace(" template", " as a template"));
                        }
                        else {
                            this.element.attr('title', this.element.attr('title').replace("Remove", "Add"));
                        }
                    }
                }
                this.element.find(".readers").each(function (i, e) {
                    if (isFavourite) {
                        if (itemDesciption === 'template') {
                            $(e).text($(e).text().replace("Save", "Remove"));
                            $(e).text($(e).text().replace("as a template", "template"));
                        }
                        else {
                            $(e).text($(e).text().replace("Add", "Remove"));
                        }
                    }
                    else {
                        if (itemDesciption === 'template') {
                            $(e).text($(e).text().replace("Remove", "Save"));
                            if (!~_this.element.attr('title').indexOf(" as a template"))
                                $(e).text($(e).text().replace(" template", " as a template"));
                        }
                        else {
                            $(e).text($(e).text().replace("Remove", "Add"));
                        }
                    }
                });
                this.element.attr("aria-checked", isFavourite.toString());
                if (triggerEvents) {
                    this.element.trigger('change', [isFavourite]);
                }
            };
            return Favourite;
        }(Core.Control));
        Core.Favourite = Favourite;
        var FavouriteInitialiser = (function () {
            function FavouriteInitialiser() {
                var _this = this;
                this.ready = function () {
                    _this.initialise($(document));
                };
            }
            FavouriteInitialiser.prototype.initialise = function (container) {
                container.find('[data-favourite-fluent]').each(function (index, element) {
                    var list = new Favourite($(element));
                });
            };
            return FavouriteInitialiser;
        }());
        Core.FavouriteInitialiser = FavouriteInitialiser;
    })(Core = Midas.Core || (Midas.Core = {}));
})(Midas || (Midas = {}));
//# sourceMappingURL=midas.core.favourite.js.map